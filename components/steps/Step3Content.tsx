import React, { useState, useRef, useEffect } from 'react';
import { Answers } from '../../types';
import { Play, Pause } from 'lucide-react';

interface Step3ContentProps {
  answers: Answers;
  onUpdateAnswer: (questionId: string, value: string) => void;
  onDownload: () => void;
  isTutorialActive: boolean;
}

interface AnswerItemProps {
  qId: string;
  label: string;
  placeholder: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  isTextarea?: boolean;
  audioSrc: string;
  isTutorialActive: boolean;
}

const AnswerItem: React.FC<AnswerItemProps> = ({ qId, label, placeholder, value, onChange, isTextarea, audioSrc, isTutorialActive }) => {
  const audioRef = useRef<HTMLAudioElement>(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isReady, setIsReady] = useState(false);
  const localStorageKey = `question_audio_played_${qId}`;

  useEffect(() => {
    const currentAudio = audioRef.current;

    const handleEnded = () => setIsPlaying(false);
    const handlePlay = () => setIsPlaying(true);
    const handlePause = () => setIsPlaying(false);
    const handleCanPlayThrough = () => {
      setIsReady(true);
    };

    if (currentAudio) {
      currentAudio.addEventListener('ended', handleEnded);
      currentAudio.addEventListener('play', handlePlay);
      currentAudio.addEventListener('pause', handlePause);
      currentAudio.addEventListener('canplaythrough', handleCanPlayThrough);
      
      // Reset state when audioSrc changes
      setIsPlaying(false);
      setIsReady(false);
      currentAudio.load(); // Explicitly load the new source
    }

    return () => {
      if (currentAudio) {
        currentAudio.removeEventListener('ended', handleEnded);
        currentAudio.removeEventListener('play', handlePlay);
        currentAudio.removeEventListener('pause', handlePause);
        currentAudio.removeEventListener('canplaythrough', handleCanPlayThrough);
        currentAudio.pause();
        currentAudio.currentTime = 0;
      }
    };
  }, [audioSrc]);

  const togglePlayPause = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play().catch(error => {
          console.error(`Error playing audio for ${qId}:`, error);
        });
      }
    }
  };

  const handleInputFocus = () => {
    if (audioRef.current && !isTutorialActive) {
      const hasPlayed = localStorage.getItem(localStorageKey) === 'true';
      if (!hasPlayed) {
        audioRef.current.play().then(() => {
          localStorage.setItem(localStorageKey, 'true');
        }).catch(error => {
          console.warn(`Autoplay prevented for ${qId} on focus:`, error);
        });
      }
    }
  };

  return (
    <div className="bg-gray-700 p-4 mb-4 border-l-4 border-blue-600">
      <div className="flex items-center mb-3">
        <button
          onClick={togglePlayPause}
          className="bg-blue-600 text-white w-8 h-8 rounded-full flex items-center justify-center hover:bg-blue-700 transition-colors duration-200 mr-3 flex-shrink-0"
          aria-label={isPlaying ? "–ü–∞—É–∑–∞" : "–í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏"}
        >
          {isPlaying ? <Pause size={16} /> : <Play size={16} />}
        </button>
        <label htmlFor={qId} className="font-bold text-gray-300 cursor-pointer flex-grow">{label}</label>
      </div>
      {isTextarea ? (
        <textarea
          id={qId}
          placeholder={placeholder}
          value={value}
          onChange={onChange}
          onFocus={handleInputFocus}
          className="w-full bg-gray-900 border-2 border-gray-600 text-white p-2.5 font-sans text-base min-h-[80px] resize-y focus:border-purple-500 focus:ring-purple-500 outline-none"
        />
      ) : (
        <input
          type="text"
          id={qId}
          placeholder={placeholder}
          value={value}
          onChange={onChange}
          onFocus={handleInputFocus}
          className="w-full bg-gray-900 border-2 border-gray-600 text-white p-2.5 font-sans text-base focus:border-purple-500 focus:ring-purple-500 outline-none"
        />
      )}
      <audio ref={audioRef} src={audioSrc} preload="auto" />
    </div>
  );
};

const Step3Content: React.FC<Step3ContentProps> = ({ answers, onUpdateAnswer, onDownload, isTutorialActive }) => {
  const [showHint, setShowHint] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    onUpdateAnswer(e.target.id, e.target.value);
  };

  return (
    <div>
      <div className="flex justify-center mb-6">
        <img src="/ezgif-114884ef5a0190.gif" alt="Keep going" className="w-16 h-auto rounded-lg shadow-lg" />
      </div>
      <p className="text-lg leading-relaxed text-gray-400 mb-5 border-l-4 border-purple-600 pl-4">
        –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –¢–∏ –∑—ñ–±—Ä–∞–≤ —É—Å—ñ –¥–æ–∫–∞–∑–∏. –¢–µ–ø–µ—Ä —á–∞—Å –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∑–≤—ñ—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–∞. –î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∏–∂—á–µ, —â–æ–± –æ–ø–∏—Å–∞—Ç–∏ –º—É–ª—å—Ç–∏–∫, —è–∫–∏–π —Ç–∏ "–ø–æ—á—É–≤". –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—à, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç" –≤–Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
      </p>
      <button 
        onClick={() => setShowHint(!showHint)}
        className="bg-none border border-yellow-400 text-yellow-400 py-2 px-4 cursor-pointer font-bold transition-all duration-200 ease-in-out hover:bg-yellow-400 hover:text-gray-900 animate-pulse-yellow hover:animate-none mt-5"
      >
        üí° {showHint ? '–°—Ö–æ–≤–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥' : '–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥'}
      </button>

      {showHint && (
        <div className="mt-4 p-5 bg-[#233a28] border border-green-600">
          <div className="mb-3"><strong>1. –ù–∞–∑–≤–∞:</strong><p className="mt-1 pl-4 border-l-3 border-green-600 text-green-200 italic">–ú—É–ª—å—Ç—Ñ—ñ–ª—å–º –ø—Ä–æ –ø—Ä–∏–≥–æ–¥–∏ –ø—ñ—Ä–∞—Ç—ñ–≤.</p></div>
          <div className="mb-3"><strong>2. –ó–≤—É–∫–∏:</strong><p className="mt-1 pl-4 border-l-3 border-green-600 text-green-200 italic">–Ø –ø–æ—á—É–≤ —à—É–º –º–æ—Ä—è, –∫—Ä–∏–∫–∏ —á–∞–π–æ–∫, —Å–∫—Ä–∏–ø –¥–µ—Ä–µ–≤'—è–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è, –≥–æ–ª–æ—Å–∏ –ø—ñ—Ä–∞—Ç—ñ–≤, –¥–∑–≤—ñ–Ω –º–æ–Ω–µ—Ç —Ç–∞ –≤–µ—Å–µ–ª—É –ø—ñ—Ä–∞—Ç—Å—å–∫—É –ø—ñ—Å–Ω—é.</p></div>
          <div className="mb-3"><strong>3. –ï–º–æ—Ü—ñ—ó:</strong><p className="mt-1 pl-4 border-l-3 border-green-600 text-green-200 italic">–ë—É–ª–æ –∑–∞—Ö–æ–ø–ª—é—é—á–µ, –æ—Å–æ–±–ª–∏–≤–æ –∫–æ–ª–∏ –≥—Ä–∞–ª–∞ –±–æ–π–æ–≤–∞ –º—É–∑–∏–∫–∞.</p></div>
          <div className="mb-3"><strong>4. –î–æ–ø–æ–º–æ–≥–∞:</strong><p className="mt-1 pl-4 border-l-3 border-green-600 text-green-200 italic">–®—É–º –º–æ—Ä—è —ñ —Å–∫—Ä–∏–ø –∫–æ—Ä–∞–±–ª—è –¥–æ–ø–æ–º–æ–≥–ª–∏ —É—è–≤–∏—Ç–∏, —â–æ —è –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—å–æ–º—É —Å—É–¥–Ω—ñ. –î–∑–≤—ñ–Ω –º–æ–Ω–µ—Ç –ø—ñ–¥–∫–∞–∑–∞–≤, —â–æ –≤–æ–Ω–∏ –∑–Ω–∞–π—à–ª–∏ —Å–∫–∞—Ä–±–∏.</p></div>
          <div><strong>5. –ù–∞–π–∫—Ä–∞—â–∏–π –∑–≤—É–∫:</strong><p className="mt-1 pl-4 border-l-3 border-green-600 text-green-200 italic">–ö—Ä–∏–∫ —á–∞–π–∫–∏, –±–æ –≤—ñ–Ω –Ω–∞–≥–∞–¥–∞–≤ –º–µ–Ω—ñ –ø—Ä–æ –º–æ—Ä–µ.</p></div>
        </div>
      )}

      <div className="mt-5">
        <AnswerItem qId="q1" label="1. üìù –í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—É —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (—è–∫—â–æ —î):" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º –ø—Ä–æ —Å–º—ñ—à–Ω–æ–≥–æ –∫–æ—Ç–∞" value={answers.q1} onChange={handleChange} audioSrc="/audio/question_1.mp3" isTutorialActive={isTutorialActive} />
        <AnswerItem qId="q2" label="2. üîä –Ø–∫—ñ –∑–≤—É–∫–∏ —Ç–∏ –ø–æ—á—É–≤? (–ø–µ—Ä–µ–ª—ñ—á–∏ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ)" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: —Å–º—ñ—Ö, –∫—Ä–æ–∫–∏, –º—É–∑–∏–∫–∞, —Å–ø—ñ–≤ –ø—Ç–∞—à–æ–∫, —à—É–º –≤—ñ—Ç—Ä—É..." value={answers.q2} onChange={handleChange} isTextarea audioSrc="/audio/question_2.mp3" isTutorialActive={isTutorialActive} />
        <AnswerItem qId="q3" label="3. üòä –Ø–∫—ñ –µ–º–æ—Ü—ñ—ó –≤–∏–∫–ª–∏–∫–∞–ª–∏ —Ü—ñ –∑–≤—É–∫–∏?" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –º–µ–Ω—ñ –±—É–ª–æ –≤–µ—Å–µ–ª–æ, –∫–æ–ª–∏..., –∞–±–æ —Ç—Ä–æ—Ö–∏ —Å—É–º–Ω–æ, —Ç–æ–º—É —â–æ..." value={answers.q3} onChange={handleChange} audioSrc="/audio/question_3.mp3" isTutorialActive={isTutorialActive} />
        <AnswerItem qId="q4" label="4. üìñ –Ø–∫ –∑–≤—É–∫–∏ –¥–æ–ø–æ–º–∞–≥–∞–ª–∏ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –≥—É—á–Ω–∞ –º—É–∑–∏–∫–∞ –æ–∑–Ω–∞—á–∞–ª–∞, —â–æ –∑–∞—Ä–∞–∑ —â–æ—Å—å —Å—Ç–∞–Ω–µ—Ç—å—Å—è..." value={answers.q4} onChange={handleChange} isTextarea audioSrc="/audio/question_4.mp3" isTutorialActive={isTutorialActive} />
        <AnswerItem qId="q5" label="5. ‚≠ê –Ø–∫–∏–π –∑–≤—É–∫ —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –Ω–∞–π–±—ñ–ª—å—à–µ —ñ —á–æ–º—É?" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –∑–≤—É–∫ –¥–æ—â—É, –±–æ –≤—ñ–Ω –º–µ–Ω–µ –∑–∞—Å–ø–æ–∫–æ—é—î." value={answers.q5} onChange={handleChange} isTextarea audioSrc="/audio/question_5.mp3" isTutorialActive={isTutorialActive} />
      </div>

      <button
        onClick={onDownload}
        className="bg-green-600 text-white border-none py-4 px-5 cursor-pointer text-lg font-bold block w-full mt-6 transition-colors duration-200 hover:bg-green-700"
      >
        üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç (.txt)
      </button>
    </div>
  );
};

export default Step3Content;