import React, { useState, useEffect, useCallback } from 'react';
import { Answers, TutorialStep } from './types';
import { TUTORIAL_STEPS } from './constants';
import Header from './components/Header';
import ProgressBar from './components/ProgressBar';
import StepCard from './components/StepCard';
import Modal from './components/Modal';
import ConfirmationModal from './components/ConfirmationModal';
import Tutorial from './components/Tutorial';
import HelpButton from './components/HelpButton';
import CompletionModal from './components/CompletionModal';

const App: React.FC = () => {
  const [activeStep, setActiveStep] = useState<number | null>(null);
  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());
  const [answers, setAnswers] = useState<Answers>({
    q1: '', q2: '', q3: '', q4: '', q5: ''
  });
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [missedPoints, setMissedPoints] = useState<number[]>([]);

  const [showTutorial, setShowTutorial] = useState(false);
  const [tutorialStepIndex, setTutorialStepIndex] = useState(0);
  const [showCompletionModal, setShowCompletionModal] = useState(false);

  useEffect(() => {
    const handleEsc = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        setActiveStep(null);
        setShowConfirmation(false);
        setShowCompletionModal(false);
      }
    };
    window.addEventListener('keydown', handleEsc);
    return () => window.removeEventListener('keydown', handleEsc);
  }, []);

  useEffect(() => {
    if (!localStorage.getItem('tutorialSeen')) {
      setTimeout(() => startTutorial(), 500);
    }
  }, []);

  const handleShowStep = (step: number) => {
    setActiveStep(step);
    if (!completedSteps.has(step)) {
      setCompletedSteps(prev => new Set(prev).add(step));
    }
  };

  const handleCloseModal = () => setActiveStep(null);

  const handleUpdateAnswer = (questionId: string, value: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: value }));
  };

  const checkAnswersBeforeDownload = () => {
    const missed: number[] = [];
    for (let i = 1; i <= 5; i++) {
      if (!answers[`q${i}`] || answers[`q${i}`].trim() === '') {
        missed.push(i);
      }
    }

    if (missed.length > 0) {
      setMissedPoints(missed);
      setShowConfirmation(true);
    } else {
      proceedToDownload();
    }
  };

  const proceedToDownload = () => {
    const questions = [
      "1. –ù–∞–∑–≤–∞ –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—É —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
      "2. –Ø–∫—ñ –∑–≤—É–∫–∏ —è –ø–æ—á—É–≤:",
      "3. –Ø–∫—ñ –µ–º–æ—Ü—ñ—ó –≤–∏–∫–ª–∏–∫–∞–ª–∏ —Ü—ñ –∑–≤—É–∫–∏:",
      "4. –Ø–∫ –∑–≤—É–∫–∏ –¥–æ–ø–æ–º–∞–≥–∞–ª–∏ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è?",
      "5. –Ø–∫–∏–π –∑–≤—É–∫ —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –Ω–∞–π–±—ñ–ª—å—à–µ —ñ —á–æ–º—É?"
    ];
    let content = "–ó–≤—ñ—Ç –∑–≤—É–∫–æ–≤–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞:\n\n";
    for (let i = 1; i <= 5; i++) {
      const answer = answers[`q${i}`];
      content += `${questions[i-1]}\n${answer || "(–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ)"}\n\n`;
    }

    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'sound-detective-answers.txt';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    setShowConfirmation(false);
    setShowCompletionModal(true);
  };
  
  const tutorialStepsWithActions: TutorialStep[] = [
    TUTORIAL_STEPS[0],
    TUTORIAL_STEPS[1],
    { ...TUTORIAL_STEPS[2], action: () => handleShowStep(1) },
    { ...TUTORIAL_STEPS[3], action: () => handleCloseModal() }
  ];

  const startTutorial = () => {
    setTutorialStepIndex(0);
    setShowTutorial(true);
  };
  
  const skipTutorial = useCallback(() => {
    setShowTutorial(false);
    handleCloseModal();
    localStorage.setItem('tutorialSeen', 'true');
  }, []);

  const navigateTutorial = (direction: number) => {
      const newStepIndex = tutorialStepIndex + direction;
      if (newStepIndex >= 0 && newStepIndex < tutorialStepsWithActions.length) {
          setTutorialStepIndex(newStepIndex);
      } else {
          skipTutorial();
      }
  };

  const stepCardsData = [
    { id: 1, emoji: 'üì∫', title: '–ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≥–ª—è–¥', desc: '–û–±–µ—Ä–∏ —Ç–∞ –ø–æ–¥–∏–≤–∏—Å—å —É–ª—é–±–ª–µ–Ω–∏–π –º—É–ª—å—Ç—Ñ—ñ–ª—å–º.' },
    { id: 2, emoji: 'üëÇ', title: '–ö—Ä–æ–∫ 2: –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è', desc: '–ü–æ–¥–∏–≤–∏—Å—å –º—É–ª—å—Ç–∏–∫ —â–µ —Ä–∞–∑, –∞–ª–µ —Ç–µ–ø–µ—Ä —ñ–∑ –∑–∞–∫—Ä–∏—Ç–∏–º–∏ –æ—á–∏–º–∞.' },
    { id: 3, emoji: '‚úçÔ∏è', title: '–ö—Ä–æ–∫ 3: –í—ñ–¥–ø–æ–≤—ñ–¥—ñ', desc: '–ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É –ø—Ä–æ —Å–≤–æ—ó —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è.' },
    { id: 4, emoji: 'üì§', title: '–ö—Ä–æ–∫ 4: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', desc: '–ó–¥–∞–π –≥–æ—Ç–æ–≤–∏–π —Ñ–∞–π–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É Logika.' }
  ];

  return (
    <div className="p-5">
      <div className="container max-w-4xl mx-auto bg-gray-800 border-2 border-gray-700">
        <Header />
        <ProgressBar completedCount={completedSteps.size} totalCount={4} />
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-5 p-7" data-tutorial="step-1">
          {stepCardsData.map(card => (
            <StepCard 
              key={card.id}
              emoji={card.emoji}
              title={card.title}
              description={card.desc}
              isCompleted={completedSteps.has(card.id)}
              onClick={() => handleShowStep(card.id)}
            />
          ))}
        </div>
      </div>

      <Modal 
        activeStep={activeStep}
        onClose={handleCloseModal}
        onNavigate={handleShowStep}
        answers={answers}
        onUpdateAnswer={handleUpdateAnswer}
        onDownload={checkAnswersBeforeDownload}
        isTutorialActive={showTutorial} 
      />

      <ConfirmationModal 
        isOpen={showConfirmation}
        missedPoints={missedPoints}
        onConfirm={proceedToDownload}
        onCancel={() => setShowConfirmation(false)}
      />

      {showTutorial && (
        <Tutorial 
          steps={tutorialStepsWithActions}
          currentStepIndex={tutorialStepIndex}
          onNavigate={navigateTutorial}
          onSkip={skipTutorial}
        />
      )}

      <HelpButton onClick={startTutorial} />

      <CompletionModal 
        isOpen={showCompletionModal}
        onClose={() => setShowCompletionModal(false)}
      />
    </div>
  );
};

export default App;